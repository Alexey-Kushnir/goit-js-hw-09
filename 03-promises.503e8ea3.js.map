{"mappings":"oeAAAA,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAyB3C,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,QAAQC,IAAI,SAEZC,YAAW,KACLR,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAlCbR,EAAKkB,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAEC,iBACF,IAAIC,EAAW,EACXC,EAAY,EAChB,IAAK,IAAIC,EAAI,EAAGA,EAAIC,OAAOnB,EAAYoB,OAAQF,GAAK,EAClDF,GAAY,EACZC,EAAYE,OAAOrB,EAAWsB,OAASD,OAAOpB,EAAUqB,OAExDnB,EAAce,EAAUC,GACrBI,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBO,QAAQC,IAAI,uBAAqBT,QAAiBC,MAAU,IAG7DmB,OAAM,EAACpB,SAAEA,EAAQC,MAAEA,MAClBO,QAAQC,IAAI,sBAAoBT,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\n// const btnCreate = document.querySelector('button[type=\"submit\"]');\n\nform.addEventListener('submit', submitForm);\n\nfunction submitForm(e) {\n  e.preventDefault();\n  let position = 0;\n  let delayStep = 0;\n  for (let i = 0; i < Number(inputAmount.value); i += 1) {\n    position += 1;\n    delayStep = Number(inputDelay.value) + Number(inputStep.value);\n\n    createPromise(position, delayStep)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        // Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        // Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    console.log('start');\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$inputDelay","$47d4ff9957288465$var$inputStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","console","log","setTimeout","addEventListener","e","preventDefault","position1","delayStep","i","Number","value","then","catch"],"version":3,"file":"03-promises.503e8ea3.js.map"}