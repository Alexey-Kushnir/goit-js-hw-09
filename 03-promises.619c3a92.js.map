{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBACvCI,EAAmB,EACnBC,EAAkB,EAyBtB,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,UAGrBH,EAAkB,C,GACjBG,E,IAnCPV,EAAKkB,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAEC,iBACF,IAAK,IAAIC,EAAI,EAAGA,EAAIC,OAAOjB,EAAYkB,OAAQF,GAAK,EAClDd,GAAmB,EAEnBD,EAAmBgB,OAAOnB,EAAWoB,OAASD,OAAOlB,EAAUmB,OAASF,EAExEb,EAAcD,EAAiBD,GAC5BkB,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUC,EAAKe,EAALf,MACjBgB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAwCC,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,M,IAGjDoB,OAAM,SAAAL,G,IAAGhB,EAAQgB,EAARhB,SAAUC,EAAKe,EAALf,MAClBgB,EAAA5B,GAAS6B,OAAOI,QACd,sBAAqCF,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\nlet delayStepCounter = 0;\nlet promisePosition = 0;\n\nform.addEventListener('submit', submitForm);\n\nfunction submitForm(e) {\n  e.preventDefault();\n  for (let i = 0; i < Number(inputAmount.value); i += 1) {\n    promisePosition += 1;\n    // console.log(promisePosition);\n    delayStepCounter = Number(inputDelay.value) + Number(inputStep.value) * i;\n\n    createPromise(promisePosition, delayStepCounter)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n      // console.log(promisePosition);\n      promisePosition = 0;\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$inputDelay","$ce04d3a99e08e73b$var$inputStep","$ce04d3a99e08e73b$var$inputAmount","$ce04d3a99e08e73b$var$delayStepCounter","$ce04d3a99e08e73b$var$promisePosition","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","i","Number","value","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.619c3a92.js.map"}